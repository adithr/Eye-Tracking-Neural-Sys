rstudioDiagnosticsReport()
install.packages("
lme")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
# Clear console
cat("\014")
library(ggplot2)
library(ez)
library(multcomp)
library(nlme)
library(pastecs)
library(reshape)
library(WRS2)
library(plyr)
# set working directory to data file directory:
setwd("C:/Users/sijam/Documents/GitHub/Eye-Tracking-Neural-Sys")
dataOriginal<-read.csv("dataset_0423.csv", header = TRUE)
data<-read.csv("results_data_subjects_V1", header = TRUE)
data<-read.csv("results_data_subjects_V1.csv", header = TRUE)
View(data)
View(data)
data<-read.csv("results_data_subjects_V1.csv", header = TRUE)
View(data)
View(data)
View(dataOriginal)
View(dataOriginal)
View(data)
View(data)
#plots
bar <- ggplot(data, aes(subject_id, delta_radius..stimulation..))
bar + stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "noise sample", y = "radii")
data<-read.csv("results_data_subjects_V1.csv", header = TRUE)
#plots
bar <- ggplot(data, aes(subject_id, delta_radius_stimulation))
bar + stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "noise sample", y = "radii")
line <- ggplot(data, aes(subject_id, delta_radius_stimulation))
line + stat_summary(fun = mean, geom = "line") + stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2) + labs(x = "subject_id", y = "delta_radius_stimulation", colour = "Type of Imagery")
boxplot <- ggplot(data, aes(subject_id, delta_radius_stimulation))
boxplot + stat_summary(fun = mean, geom = "point") + labs(x = "subject_id", y = "delta_radius_stimulation")
boxplot + geom_point() + geom_smooth() + labs(x = "perceived noise sample", y = "radii")
# load data files:
spiderWide <- read.delim("SpiderWide.dat", header = TRUE)
# set working directory to data file directory:
#setwd("~/Documents/eth/Stats/R/Andy Data Files")
setwd("C:/Users/sijam/Dokumente/0 Schule tempor채r/MSc HST/Statistics/companion website ressources/Data files/Data files")
# load data files:
spiderWide <- read.delim("SpiderWide.dat", header = TRUE)
# We can load our newly created function into R's global environment:
source("~/Documents/eth/Stats/R/Rolf Script Files/rmMeanAdjust.R")
# We can load our newly created function into R's global environment:
source("C:/Users/sijam/Dokumente/0 Schule tempor채r/MSc HST/Statistics/Week 7/rmMeanAdjust.R")
# ... or make a new data frame with only the adjusted columns:
spiderWideAdj <- rmMeanAdjust(spiderWide)
names(spiderWideAdj) <- c("Real","Picture") # change column names
# To be able to plot these data using ggplot, we have to 'melt' or 'stack' the data into long format:
spiderLongAdj <- stack(spiderWideAdj) # this function automatically generates a factor variable with the different conditions
names(spiderLongAdj) <- c("Anxiety","Factor") # here I appropriately name the factor variable 'Factor'.
# Finally, we are ready to plot our bar graphs with RM error bars:
spiderBar <- ggplot(spiderLongAdj, aes(Factor, Anxiety)) # create plot of anxiety in the two levels of our factor
spiderBar +
theme_grey(base_size = 14) + # get nice theme going
stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black") + # add the bars
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) + # add the error bars
labs(x = "Type of Stimulus", y = "Anxiety") + # label the axes
ggtitle("RM data with correct error bars") + # add a plot title
theme(plot.title = element_text(hjust = 0.5, face = "italic")) + # center and italicize plot title
scale_x_discrete(labels=c("Spider Picture", "Real Spider")) + # add bar labels
scale_y_continuous(limits = c(0, 60), breaks = seq(from = 0, to = 60, by = 10)) # adapt y-scale to correspond to Andy's scale
# Create a new data frame of deltas:
deltaLevel <- data.frame(spiderWide$real - spiderWide$picture) # here the deltas are calculated
names(deltaLevel) <- c("Anxiety") # These deltas are Anxiety deltas
deltaLevel$Factor = factor("Delta") # Here I add a Factor with only one level: Delta
# If we wish, we can append data frame 'deltaLevel' to data frame 'spiderLong' using 'rbind':
spiderLong <- rbind(spiderLongAdj,deltaLevel)
# We can also very easily append a 'Delta' column to the original spiderWide data frame:
spiderWide$delta <- deltaLevel$Anxiety
# Now we plot only the delta factor as a single-bar bar graph, with correct error bars (without the need to adjust anything):
spiderBar2 <- ggplot(subset(spiderLong,(Factor == "Delta")), aes(Factor, Anxiety))
spiderBar2 +
theme_grey(base_size = 14) + # get nice theme going
stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black", width = 0.5) + # add the bar
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) + # add the error bars
labs(x = "Real minus Picture", y = expression(Delta*" Anxiety")) + # label the axes (note the greek capital Delta!)
ggtitle("RM data with correct error bars") + # add a plot title
theme(plot.title = element_text(hjust = 0.5, face = "italic")) + # center and italicize plot title
scale_x_discrete(labels = "")  # remove bar label
# Clean workspace
rm(list=ls())
# Clear console
cat("\014")
# load data file:
spiderWide <- read.delim("SpiderWide.dat", header = TRUE)
spiderWide$delta <- spiderWide$real - spiderWide$picture # add delta column
# Descriptives to test assumptions:
stat.desc(spiderWide$delta, basic = FALSE, norm = TRUE) # Note that we use the 'delta' column! See DSUR SELF-TEST on p 390
# Perform paired-samples t-test to see whether seeing real or pictured spiders leads to different anxiety levels:
dep.t.test <- t.test(spiderWide$real,spiderWide$picture, paired = TRUE)
dep.t.test
# The dependent t-test is the simplest linear model:
# It's a model with ONLY an intercept!
# That is, it simply tests whether the INTERCEPT (i.e. the mean difference) is different from zero.
dep.t.test.lm <- lm(spiderWide$delta ~ 1)
summary(dep.t.test.lm)
confint(dep.t.test.lm)
# Pearson r is a good measure of effect size for dependent t-test:
t <- dep.t.test$statistic[[1]]
df <- dep.t.test$parameter[[1]]
r <- sqrt(t^2/(t^2+df))
round(r, 3)
# Finally, a robust method for performing dependent t-test:
dep.t.test.yuen <- yuend(spiderWide$real, spiderWide$picture)
dep.t.test.yuen
# Clean workspace
rm(list=ls())
###########
# PLOTS
###########
bar <- ggplot(data, aes(subject_id, delta_radius_stimulation))
bar + stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "subject_id", y = "delta_radius_stimulation")
# Create a new data frame of deltas:
deltaLevel <- data.frame(spiderWide$real - spiderWide$picture) # here the deltas are calculated
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
# Clear console
cat("\014")
library(ggplot2)
library(pastecs)
library(WRS2)
library(plyr)
# set working directory to data file directory:
#setwd("~/Documents/eth/Stats/R/Andy Data Files")
setwd("C:/Users/sijam/Dokumente/0 Schule tempor채r/MSc HST/Statistics/companion website ressources/Data files/Data files")
# load data files:
spiderWide <- read.delim("SpiderWide.dat", header = TRUE)
# We can load our newly created function into R's global environment:
source("C:/Users/sijam/Dokumente/0 Schule tempor채r/MSc HST/Statistics/Week 7/rmMeanAdjust.R")
# ... or make a new data frame with only the adjusted columns:
spiderWideAdj <- rmMeanAdjust(spiderWide)
names(spiderWideAdj) <- c("Real","Picture") # change column names
# To be able to plot these data using ggplot, we have to 'melt' or 'stack' the data into long format:
spiderLongAdj <- stack(spiderWideAdj) # this function automatically generates a factor variable with the different conditions
names(spiderLongAdj) <- c("Anxiety","Factor") # here I appropriately name the factor variable 'Factor'.
# Finally, we are ready to plot our bar graphs with RM error bars:
spiderBar <- ggplot(spiderLongAdj, aes(Factor, Anxiety)) # create plot of anxiety in the two levels of our factor
spiderBar +
theme_grey(base_size = 14) + # get nice theme going
stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black") + # add the bars
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) + # add the error bars
labs(x = "Type of Stimulus", y = "Anxiety") + # label the axes
ggtitle("RM data with correct error bars") + # add a plot title
theme(plot.title = element_text(hjust = 0.5, face = "italic")) + # center and italicize plot title
scale_x_discrete(labels=c("Spider Picture", "Real Spider")) + # add bar labels
scale_y_continuous(limits = c(0, 60), breaks = seq(from = 0, to = 60, by = 10)) # adapt y-scale to correspond to Andy's scale
# Create a new data frame of deltas:
deltaLevel <- data.frame(spiderWide$real - spiderWide$picture) # here the deltas are calculated
View(deltaLevel)
View(deltaLevel)
names(deltaLevel) <- c("Anxiety") # These deltas are Anxiety deltas
deltaLevel$Factor = factor("Delta") # Here I add a Factor with only one level: Delta
# Now we plot only the delta factor as a single-bar bar graph, with correct error bars (without the need to adjust anything):
spiderBar2 <- ggplot(subset(spiderLong,(Factor == "Delta")), aes(Factor, Anxiety))
# If we wish, we can append data frame 'deltaLevel' to data frame 'spiderLong' using 'rbind':
spiderLong <- rbind(spiderLongAdj,deltaLevel)
# We can also very easily append a 'Delta' column to the original spiderWide data frame:
spiderWide$delta <- deltaLevel$Anxiety
# Now we plot only the delta factor as a single-bar bar graph, with correct error bars (without the need to adjust anything):
spiderBar2 <- ggplot(subset(spiderLong,(Factor == "Delta")), aes(Factor, Anxiety))
spiderBar2 +
theme_grey(base_size = 14) + # get nice theme going
stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black", width = 0.5) + # add the bar
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) + # add the error bars
labs(x = "Real minus Picture", y = expression(Delta*" Anxiety")) + # label the axes (note the greek capital Delta!)
ggtitle("RM data with correct error bars") + # add a plot title
theme(plot.title = element_text(hjust = 0.5, face = "italic")) + # center and italicize plot title
scale_x_discrete(labels = "")  # remove bar label
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
# Clear console
cat("\014")
library(ggplot2)
library(ez)
library(multcomp)
library(nlme)
library(pastecs)
library(reshape)
library(WRS2)
library(plyr)
# set working directory to data file directory:
setwd("C:/Users/sijam/Documents/GitHub/Eye-Tracking-Neural-Sys")
# load data files:
dataOriginal<-read.csv("dataset_0423.csv", header = TRUE)
data<-read.csv("results_data_subjects_V1.csv", header = TRUE)
subsetOriginal <- dataOriginal[c(8065:10080),]
##############################
# REPEATED MEASURES ERROR BARS
##############################
# We can load user-defined function file 'rmMeanAdjust.R' into R's global environment:
source("C:/Users/sijam/Dokumente/0 Schule tempor채r/MSc HST/Statistics/Week 7/rmMeanAdjust.R")
data$Factor = factor("Delta") # Here I add a Factor with only one level: Delta
bar2 <- ggplot(subset(data,(Factor == "Delta")), aes(Factor, delta_radius_stimulation))
bar2 +
theme_grey(base_size = 14) + # get nice theme going
stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black", width = 0.5) + # add the bar
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) + # add the error bars
labs(x = "High noise - Low noise games", y = expression(Delta*" delta_radius_stimulation")) + # label the axes (note the greek capital Delta!)
ggtitle("bar plot with correct error bars") + # add a plot title
theme(plot.title = element_text(hjust = 0.5, face = "italic")) + # center and italicize plot title
scale_x_discrete(labels = "")  # remove bar label
# Clean workspace
rm(list=ls())
# Clear console
cat("\014")
# load data file:
dataOriginal<-read.csv("dataset_0423.csv", header = TRUE)
data<-read.csv("results_data_subjects_V1.csv", header = TRUE)
# Descriptives to test assumptions:
stat.desc(data$delta_radius_stimulation, basic = FALSE, norm = TRUE) # Note that we use the 'delta' column! See DSUR SELF-TEST on p 390
# The dependent t-test is the simplest linear model:
# It's a model with ONLY an intercept!
# That is, it simply tests whether the INTERCEPT (i.e. the mean difference) is different from zero.
dep.t.test.lm <- lm(spiderWide$delta_radius_stimulation ~ 1)
summary(dep.t.test.lm)
# The dependent t-test is the simplest linear model:
# It's a model with ONLY an intercept!
# That is, it simply tests whether the INTERCEPT (i.e. the mean difference) is different from zero.
dep.t.test.lm <- lm(delta$delta_radius_stimulation ~ 1)
summary(dep.t.test.lm)
# The dependent t-test is the simplest linear model:
# It's a model with ONLY an intercept!
# That is, it simply tests whether the INTERCEPT (i.e. the mean difference) is different from zero.
dep.t.test.lm <- lm(data$delta_radius_stimulation ~ 1)
summary(dep.t.test.lm)
confint(dep.t.test.lm)
dep.t.test.lm2 <- lm(data$delta_radius_fixation ~ 1)
summary(dep.t.test.lm2)
confint(dep.t.test.lm2)
###########
# PLOTS
###########
bar <- ggplot(data, aes(subject_id, delta_radius_stimulation))
bar + stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "subject_id", y = "delta_radius_stimulation")
line <- ggplot(data, aes(subject_id, delta_radius_stimulation))
line + stat_summary(fun = mean, geom = "line") + stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2) + labs(x = "subject_id", y = "delta_radius_stimulation", colour = "Type of Imagery")
scatter <- ggplot(data, aes(subject_id, delta_radius_stimulation))
scatter + stat_summary(fun = mean, geom = "point") + labs(x = "subject_id", y = "delta_radius_stimulation")
###########
# PLOTS
###########
bar <- ggplot(data, aes(subject_id, delta_radius_stimulation))
bar + stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "subject_id", y = "delta_radius_stimulation")
line <- ggplot(data, aes(subject_id, delta_radius_stimulation))
line + stat_summary(fun = mean, geom = "line") + stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2) + labs(x = "subject_id", y = "delta_radius_stimulation", colour = "Type of Imagery")
scatter <- ggplot(data, aes(subject_id, delta_radius_stimulation))
scatter + stat_summary(fun = mean, geom = "point") + labs(x = "subject_id", y = "delta_radius_stimulation")
scatter + geom_point() + geom_smooth() + labs(x = "perceived noise sample", y = "radii")
scatter + geom_point() + geom_smooth() + labs(x = "subject_id", y = "delta radius")
# Pearson r is a good measure of effect size for dependent t-test:
t <- dep.t.test$statistic[[1]]
df <- dep.t.test$parameter[[1]]
bar2 <- ggplot(subset(data,(Factor == "Delta")), aes(Factor, delta_radius_stimulation))
bar2 +
theme_grey(base_size = 14) + # get nice theme going
stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black", width = 0.5) + # add the bar
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) + # add the error bars
labs(x = "High noise - Low noise games", y = expression(Delta*" delta_radius_stimulation")) + # label the axes (note the greek capital Delta!)
ggtitle("bar plot with correct error bars") + # add a plot title
theme(plot.title = element_text(hjust = 0.5, face = "italic")) + # center and italicize plot title
scale_x_discrete(labels = "")  # remove bar label
##############################
# REPEATED MEASURES ERROR BARS
##############################
# We can load user-defined function file 'rmMeanAdjust.R' into R's global environment:
source("C:/Users/sijam/Dokumente/0 Schule tempor채r/MSc HST/Statistics/Week 7/rmMeanAdjust.R")
data$Factor = factor("Delta") # Here I add a Factor with only one level: Delta
bar2 <- ggplot(subset(data,(Factor == "Delta")), aes(Factor, delta_radius_stimulation))
bar2 +
theme_grey(base_size = 14) + # get nice theme going
stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black", width = 0.5) + # add the bar
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) + # add the error bars
labs(x = "High noise - Low noise games", y = expression(Delta*" delta_radius_stimulation")) + # label the axes (note the greek capital Delta!)
ggtitle("bar plot with correct error bars") + # add a plot title
theme(plot.title = element_text(hjust = 0.5, face = "italic")) + # center and italicize plot title
scale_x_discrete(labels = "")  # remove bar label
bar2 +
theme_grey(base_size = 14) + # get nice theme going
stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black", width = 0.5) + # add the bar
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) + # add the error bars
labs(x = "High noise - Low noise games", y = expression(Delta*" radius_stimulation")) + # label the axes (note the greek capital Delta!)
ggtitle("bar plot with correct error bars") + # add a plot title
theme(plot.title = element_text(hjust = 0.5, face = "italic")) + # center and italicize plot title
scale_x_discrete(labels = "")  # remove bar label
bar2 +
theme_grey(base_size = 14) + # get nice theme going
stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black", width = 0.5) + # add the bar
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) + # add the error bars
labs(x = "High noise - Low noise games", y = expression(Delta*" radius_stimulation")) + # label the axes (note the greek capital Delta!)
ggtitle("bar plot with correct error bars") + # add a plot title
theme(plot.title = element_text(hjust = 0.5, face = "italic")) + # center and italicize plot title
scale_x_discrete(labels = "")  # remove bar label
